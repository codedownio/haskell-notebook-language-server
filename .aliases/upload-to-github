#! /usr/bin/env nix-shell
#! nix-shell -i bash -p jq github-cli

set -eo pipefail

SCRIPTDIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd "$SCRIPTDIR"

. ./util.sh

cd ..

for arg do
    shift

    [ "$arg" = "--grand" ] && GRAND="t" && continue
done

if [[ -n "$GRAND" ]]; then
  BUILT=$(nix build .#grandCombinedGithubArtifacts \
    --builders-use-substitutes --no-link --json | jq -r '.[0].outputs.out')
else
  BUILT=$(nix build .#githubArtifacts --no-link --json | jq -r '.[0].outputs.out')
fi

echo "Built: $BUILT"
ls "$BUILT"

VERSION="$(nix eval .#ghc92-static.version --raw)"
echo "Got version: $VERSION"

IFS=$'\n'
ARTIFACTS=$(find "$BUILT" -name "*.tar.gz")
unset IFS
echo "Saw artifacts:\n$ARTIFACTS"

# Smoke check
# FIRST_EXECUTABLE=$(find "$BUILT" -type f -executable | head -n 1)
# echo "FIRST_EXECUTABLE: $FIRST_EXECUTABLE"
# $FIRST_EXECUTABLE --help > /dev/null 2>&1

TAG=v"$VERSION"

echo ""
echo "This will tag the current commit as $TAG and upload the above aliases to Git."
echo ""
confirm_execution

echo "Tagging at $TAG"
git tag "$TAG" -f
echo ""

echo "Pushing tags"
git push --tags
echo ""

echo "Creating release $TAG"
gh release create "$TAG" \
  ${ARTIFACTS[@]} \
  --title "$TAG" \
  --notes ""
